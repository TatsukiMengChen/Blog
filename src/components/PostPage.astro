---

import type { CollectionEntry } from "astro:content";
import { getPostUrlBySlug } from "@utils/url-utils";
import { siteConfig } from "@/config";
import PostCard from "./PostCard.astro";

const { page } = Astro.props;

let delay = 0;
const interval = 50;

// 批量获取阅读数
async function getBatchPostViews(
	urls: string[],
): Promise<Record<string, number>> {
	const counterUrl = import.meta.env.PUBLIC_COUNTER_URL;
	const res = await fetch(`${counterUrl}/batch`, {
		method: "POST",
		headers: {
			"Content-Type": "application/json",
		},
		body: JSON.stringify(urls),
	});
	if (!res.ok) throw new Error("Failed to fetch batch post views");
	return await res.json();
}

const postUrls = page.data.map((entry: CollectionEntry<"posts">) =>
	getPostUrlBySlug(entry.slug),
);

let postViews: Record<string, number> = {};
if (siteConfig.enablePostViews) {
	postViews = await getBatchPostViews(postUrls);
}
---
<div class="transition flex flex-col rounded-[var(--radius-large)] bg-[var(--card-bg)] py-1 md:py-0 md:bg-transparent md:gap-4 mb-4">
    {page.data.map((entry: CollectionEntry<"posts">, idx: number) => (
        <PostCard
            entry={entry}
            title={entry.data.title}
            tags={entry.data.tags}
            category={entry.data.category}
            published={entry.data.published}
            updated={entry.data.updated}
            url={getPostUrlBySlug(entry.slug)}
            image={entry.data.image}
            description={entry.data.description}
            draft={entry.data.draft}
            views={postViews[postUrls[idx]] ?? 0}
            class:list="onload-animation"
            style={`animation-delay: calc(var(--content-delay) + ${delay++ * interval}ms);`}
        ></PostCard>
    ))}
</div>
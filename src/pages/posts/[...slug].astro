---
import path from "node:path";
import License from "@components/misc/License.astro";
import Markdown from "@components/misc/Markdown.astro";
import I18nKey from "@i18n/i18nKey";
import { i18n } from "@i18n/translation";
import MainGridLayout from "@layouts/MainGridLayout.astro";
import { getSortedPosts } from "@utils/content-utils";
import { getDir, getPostUrlBySlug } from "@utils/url-utils";
import { Icon } from "astro-icon/components";
import { licenseConfig } from "src/config";
import ImageWrapper from "../../components/misc/ImageWrapper.astro";
import PostMetadata from "../../components/PostMeta.astro";
import { profileConfig, siteConfig } from "../../config";
import { formatDateToYYYYMMDD } from "../../utils/date-utils";

export async function getStaticPaths() {
	const blogEntries = await getSortedPosts();
	return blogEntries.map((entry) => ({
		params: { slug: entry.slug },
		props: { entry },
	}));
}

const { entry } = Astro.props;
const { Content, headings } = await entry.render();

const { remarkPluginFrontmatter } = await entry.render();

const jsonLd = {
	"@context": "https://schema.org",
	"@type": "BlogPosting",
	headline: entry.data.title,
	description: entry.data.description || entry.data.title,
	keywords: entry.data.tags,
	author: {
		"@type": "Person",
		name: profileConfig.name,
		url: Astro.site,
	},
	datePublished: formatDateToYYYYMMDD(entry.data.published),
	inLanguage: entry.data.lang
		? entry.data.lang.replace("_", "-")
		: siteConfig.lang.replace("_", "-"),
	// TODO include cover image here
};
---
<MainGridLayout banner={entry.data.image} title={entry.data.title} description={entry.data.description} lang={entry.data.lang} setOGTypeArticle={true} headings={headings}>
    <script is:inline slot="head" type="application/ld+json" set:html={JSON.stringify(jsonLd)}></script>
    <div class="flex w-full rounded-[var(--radius-large)] overflow-hidden relative mb-4">
        <div id="post-container" class:list={["card-base z-10 px-6 md:px-9 pt-6 pb-4 relative w-full ",
            {}
        ]}>
            <!-- word count and reading time -->
            <div class="flex flex-row text-black/30 dark:text-white/30 gap-5 mb-3 transition onload-animation">
                <div class="flex flex-row items-center">
                    <div class="transition h-6 w-6 rounded-md bg-black/5 dark:bg-white/10 text-black/50 dark:text-white/50 flex items-center justify-center mr-2">
                        <Icon name="material-symbols:notes-rounded"></Icon>
                    </div>
                    <div class="text-sm">{remarkPluginFrontmatter.words} {" " + i18n(I18nKey.wordsCount)}</div>
                </div>
                <div class="flex flex-row items-center">
                    <div class="transition h-6 w-6 rounded-md bg-black/5 dark:bg-white/10 text-black/50 dark:text-white/50 flex items-center justify-center mr-2">
                        <Icon name="material-symbols:schedule-outline-rounded"></Icon>
                    </div>
                    <div class="text-sm">
                        {remarkPluginFrontmatter.minutes} {" " + i18n(remarkPluginFrontmatter.minutes === 1 ? I18nKey.minuteCount : I18nKey.minutesCount)}
                    </div>
                </div>
                <!-- views -->
                {siteConfig.enablePostViews && (
                    <div class="flex flex-row items-center">
                        <div class="transition h-6 w-6 rounded-md bg-black/5 dark:bg-white/10 text-black/50 dark:text-white/50 flex items-center justify-center mr-2">
                            <Icon name="material-symbols:visibility-outline-rounded"></Icon>
                        </div>
                        <div class="text-sm">
                            <span id="post-views">0</span> {" " + i18n(I18nKey.viewsCount)}
                        </div>
                    </div>
                )}
            </div>

            <!-- title -->
            <div class="relative onload-animation">
                <div
                    data-pagefind-body data-pagefind-weight="10" data-pagefind-meta="title"
                    class="transition w-full block font-bold mb-3
                    text-3xl md:text-[2.25rem]/[2.75rem]
                    text-black/90 dark:text-white/90
                    md:before:w-1 before:h-5 before:rounded-md before:bg-[var(--primary)]
                    before:absolute before:top-[0.75rem] before:left-[-1.125rem]
                ">
                    {entry.data.title}
                </div>
            </div>

            <!-- metadata -->
            <div class="onload-animation">
                <PostMetadata
                        class="mb-5"
                        published={entry.data.published}
                        updated={entry.data.updated}
                        tags={entry.data.tags}
                        category={entry.data.category}
                ></PostMetadata>
                {!entry.data.image && <div class="border-[var(--line-divider)] border-dashed border-b-[1px] mb-5"></div>}
            </div>

            <!-- always show cover as long as it has one -->

            {entry.data.image &&
                <ImageWrapper id="post-cover" src={entry.data.image} basePath={path.join("content/posts/", getDir(entry.id))} class="mb-8 rounded-xl banner-container onload-animation"/>
            }


            <Markdown class="mb-6 markdown-content onload-animation">
                <Content />
            </Markdown>

            {licenseConfig.enable && <License title={entry.data.title} slug={entry.slug} pubDate={entry.data.published} class="mb-6 rounded-xl license-container onload-animation"></License>}

        </div>
    </div>

    <div class="flex flex-col md:flex-row justify-between mb-4 gap-4 overflow-hidden w-full">
        <a href={entry.data.nextSlug ? getPostUrlBySlug(entry.data.nextSlug) : "#"}
           class:list={["w-full font-bold overflow-hidden active:scale-95", {"pointer-events-none": !entry.data.nextSlug}]}>
            {entry.data.nextSlug && <div class="btn-card rounded-2xl w-full h-[3.75rem] max-w-full px-4 flex items-center !justify-start gap-4" >
                <Icon name="material-symbols:chevron-left-rounded" class="text-[2rem] text-[var(--primary)]" />
                <div class="overflow-hidden transition overflow-ellipsis whitespace-nowrap max-w-[calc(100%_-_3rem)] text-black/75 dark:text-white/75">
                    {entry.data.nextTitle}
                </div>
            </div>}
        </a>

        <a href={entry.data.prevSlug ? getPostUrlBySlug(entry.data.prevSlug) : "#"}
           class:list={["w-full font-bold overflow-hidden active:scale-95", {"pointer-events-none": !entry.data.prevSlug}]}>
            {entry.data.prevSlug && <div class="btn-card rounded-2xl w-full h-[3.75rem] max-w-full px-4 flex items-center !justify-end gap-4">
                <div class="overflow-hidden transition overflow-ellipsis whitespace-nowrap max-w-[calc(100%_-_3rem)] text-black/75 dark:text-white/75">
                    {entry.data.prevTitle}
                </div>
                <Icon name="material-symbols:chevron-right-rounded" class="text-[2rem] text-[var(--primary)]" />
            </div>}
        </a>
    </div>

</MainGridLayout>

<script define:vars={{ 
    postSlug: entry.slug, 
    counterUrl: import.meta.env.PUBLIC_COUNTER_URL, 
    enablePostViews: siteConfig.enablePostViews,
    postUrl: getPostUrlBySlug(entry.slug)
}}>
    // 使用全局变量来防抖
    if (!window.postDetailViewsState) {
        window.postDetailViewsState = {
            isUpdating: false,
            debounceTimer: null
        };
    }

    // 获取并更新文章访问量
    async function getAndUpdatePostViews() {
        if (!enablePostViews) {
            return;
        }

        // 如果正在更新，则忽略这次调用
        if (window.postDetailViewsState.isUpdating) {
            return;
        }

        // 清除之前的防抖定时器
        if (window.postDetailViewsState.debounceTimer) {
            clearTimeout(window.postDetailViewsState.debounceTimer);
        }

        // 设置1秒防抖
        window.postDetailViewsState.debounceTimer = setTimeout(async () => {
            // 检查当前页面的 URL 是否匹配这篇文章的 URL
            const currentPath = window.location.pathname;
            if (currentPath !== postUrl) {
                return; // 当前页面不是这篇文章，不进行更新
            }

            window.postDetailViewsState.isUpdating = true;

            try {
                // 首先尝试从 Footer 组件缓存的数据中获取访问量
                const cachedBatchData = sessionStorage.getItem('total-post-views-cache');
                let viewsFromCache = null;
                
                if (cachedBatchData) {
                    // 如果有缓存的批量数据，尝试从中提取当前文章的访问量
                    // 注意：这里需要从 Footer 的 batch 请求结果中提取
                    const batchCacheKey = 'post-views-batch-cache';
                    const batchData = sessionStorage.getItem(batchCacheKey);
                    if (batchData) {
                        try {
                            const parsed = JSON.parse(batchData);
                            viewsFromCache = parsed[postUrl];
                        } catch (e) {
                            console.warn('Failed to parse batch cache data:', e);
                        }
                    }
                }

                // 如果有缓存的访问量，直接使用
                if (viewsFromCache !== null && typeof viewsFromCache === 'number') {
                    const viewsElement = document.getElementById('post-views');
                    if (viewsElement) {
                        viewsElement.textContent = viewsFromCache.toString();
                    }
                    return; // 使用缓存数据，不发送新请求
                }

                // 如果没有缓存数据，发送 POST 请求来增加访问量并获取当前访问量
                const url = `${counterUrl}${postUrl}`;
                const res = await fetch(url, {
                    method: "POST",
                    headers: {
                        "Content-Type": "application/json",
                    },
                });

                if (!res.ok) {
                    throw new Error("Failed to fetch post views");
                }

                const data = await res.json();
                const viewsElement = document.getElementById('post-views');
                if (viewsElement && typeof data.views === 'number') {
                    viewsElement.textContent = data.views.toString();
                }
            } catch (error) {
                console.error('Failed to fetch post views:', error);
                // 失败时保持默认值 0
            } finally {
                window.postDetailViewsState.isUpdating = false;
            }
        }, 1000);
    }

    // 立即从缓存中读取并显示访问量
    function loadViewsFromCache() {
        if (!enablePostViews) {
            return;
        }

        const viewsElement = document.getElementById('post-views');
        if (!viewsElement) {
            return;
        }

        // 尝试从 Footer 的批量缓存中获取数据
        const batchData = sessionStorage.getItem('post-views-batch-cache');
        if (batchData) {
            try {
                const parsed = JSON.parse(batchData);
                const cachedViews = parsed[postUrl];
                if (typeof cachedViews === 'number') {
                    viewsElement.textContent = cachedViews.toString();
                    return; // 成功从缓存加载，无需继续
                }
            } catch (e) {
                console.warn('Failed to parse batch cache data:', e);
            }
        }
    }

    // 立即尝试从缓存加载数据
    loadViewsFromCache();

    // 使用更简洁的事件监听，主要依赖 Footer 的全局轮询
    document.addEventListener('DOMContentLoaded', () => {
        loadViewsFromCache();
        getAndUpdatePostViews();
    });
    
    // 监听 Astro 的路由变化事件（备用）
    document.addEventListener('astro:page-load', () => {
        loadViewsFromCache();
        getAndUpdatePostViews();
    });

    // 监听 popstate 事件（浏览器前进/后退，备用）
    window.addEventListener('popstate', () => {
        setTimeout(() => {
            loadViewsFromCache();
            getAndUpdatePostViews();
        }, 100);
    });
</script>
